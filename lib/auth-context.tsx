"use client"

import { createContext, useContext, useState, useEffect, type ReactNode } from "react"

interface User {
  id: string
  email: string
  firstName: string
  lastName: string
  role: "student" | "teacher" | "admin"
  createdAt: string
}

interface AuthContextType {
  user: User | null
  isLoading: boolean
  isAuthenticated: boolean
  isAdmin: boolean
  login: (email: string, password: string) => Promise<{ success: boolean; error?: string }>
  register: (userData: RegisterData) => Promise<{ success: boolean; error?: string }>
  logout: () => void
}

interface RegisterData {
  firstName: string
  lastName: string
  email: string
  password: string
  role: string
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

// –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const DEMO_USERS = [
  {
    id: "1",
    email: "student@university.edu",
    password: "student123",
    firstName: "–ò–≤–∞–Ω",
    lastName: "–ü–µ—Ç—Ä–æ–≤",
    role: "student" as const,
    createdAt: new Date().toISOString(),
  },
  {
    id: "2",
    email: "admin@university.edu",
    password: "admin123",
    firstName: "–ê–Ω–Ω–∞",
    lastName: "–°–º–∏—Ä–Ω–æ–≤–∞",
    role: "admin" as const,
    createdAt: new Date().toISOString(),
  },
]

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  console.log("üîÑ AuthProvider render:", { user, isLoading })

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const isAuthenticated = !!user
  const isAdmin = user?.role === "admin" || user?.role === "teacher"

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    console.log("üöÄ AuthProvider useEffect –∑–∞–ø—É—â–µ–Ω")

    const initAuth = () => {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const storedUsers = localStorage.getItem("users")
        if (!storedUsers) {
          console.log("üìù –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
          localStorage.setItem("users", JSON.stringify(DEMO_USERS))
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        const savedUser = localStorage.getItem("currentUser")
        console.log("üíæ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", savedUser)

        if (savedUser) {
          try {
            const parsedUser = JSON.parse(savedUser)
            console.log("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parsedUser)
            setUser(parsedUser)
          } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
            localStorage.removeItem("currentUser")
          }
        } else {
          console.log("üë§ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error)
      } finally {
        setIsLoading(false)
        console.log("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
      }
    }

    initAuth()
  }, [])

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  useEffect(() => {
    console.log("üë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:", {
      user: user ? `${user.firstName} ${user.lastName} (${user.role})` : null,
      isLoading,
      isAuthenticated,
      isAdmin,
    })
  }, [user, isLoading, isAuthenticated, isAdmin])

  const login = async (email: string, password: string): Promise<{ success: boolean; error?: string }> => {
    console.log("üîê –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥:", { email, password })
    setIsLoading(true)

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const storedUsers = localStorage.getItem("users")
      const users = storedUsers ? JSON.parse(storedUsers) : DEMO_USERS

      console.log(
        "üë• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
        users.map((u) => ({ email: u.email, role: u.role })),
      )

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const foundUser = users.find(
        (u: any) => u.email.toLowerCase().trim() === email.toLowerCase().trim() && u.password === password,
      )

      console.log("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", foundUser)

      if (!foundUser) {
        console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        setIsLoading(false)
        return { success: false, error: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" }
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userWithoutPassword = {
        id: foundUser.id,
        email: foundUser.email,
        firstName: foundUser.firstName,
        lastName: foundUser.lastName,
        role: foundUser.role,
        createdAt: foundUser.createdAt,
      }

      console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userWithoutPassword)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      localStorage.setItem("currentUser", JSON.stringify(userWithoutPassword))
      setUser(userWithoutPassword)
      setIsLoading(false)

      console.log("üéâ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!")
      return { success: true }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error)
      setIsLoading(false)
      return { success: false, error: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É" }
    }
  }

  const register = async (userData: RegisterData): Promise<{ success: boolean; error?: string }> => {
    console.log("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", userData)
    setIsLoading(true)

    try {
      const storedUsers = localStorage.getItem("users")
      const users = storedUsers ? JSON.parse(storedUsers) : DEMO_USERS

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
      const existingUser = users.find((u: any) => u.email.toLowerCase().trim() === userData.email.toLowerCase().trim())
      if (existingUser) {
        setIsLoading(false)
        return { success: false, error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = {
        id: Date.now().toString(),
        email: userData.email.toLowerCase().trim(),
        password: userData.password,
        firstName: userData.firstName.trim(),
        lastName: userData.lastName.trim(),
        role: userData.role as "student" | "teacher" | "admin",
        createdAt: new Date().toISOString(),
      }

      users.push(newUser)
      localStorage.setItem("users", JSON.stringify(users))

      // –ê–≤—Ç–æ–≤—Ö–æ–¥
      const userWithoutPassword = {
        id: newUser.id,
        email: newUser.email,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        role: newUser.role,
        createdAt: newUser.createdAt,
      }

      setUser(userWithoutPassword)
      localStorage.setItem("currentUser", JSON.stringify(userWithoutPassword))
      setIsLoading(false)

      console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
      return { success: true }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error)
      setIsLoading(false)
      return { success: false, error: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" }
    }
  }

  const logout = () => {
    console.log("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    setUser(null)
    localStorage.removeItem("currentUser")
  }

  const value: AuthContextType = {
    user,
    isLoading,
    isAuthenticated,
    isAdmin,
    login,
    register,
    logout,
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider")
  }
  return context
}
